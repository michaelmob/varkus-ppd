#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
cd "$( cd -P "$( dirname "$SOURCE" )" && pwd )/.."

# Check that 'environment' file exists or create it
if [ ! -e ./scripts/env_type ]; then
	echo "local" > ./scripts/env_type
fi

# Set environment 
ENVIRONMENT=$(cat ./scripts/env_type | xargs)


#
# shortcut function for docker-compose as superuser 
#
function compose() {
	if [ "$ENVIRONMENT" == "production" ]; then
		if [ ! -e ./docker-compose.production.yml ]; then
			echo "docker-compose.production.yml not found"
			exit 1
		fi

		EXTRA="-f docker-compose.production.yml"
	fi

	sudo docker-compose -f docker-compose.yml $EXTRA $@
}


#
# helper function to display options
#
function add_help() {
	echo "  $1 ($2)"
	echo "    usage: ./viking $3"
	echo ""
}


case "$1" in

	# List commands and helpful text
	h) ;&
	help)
		echo -e "\nViking Application\n"
		add_help "* / c / compose" "run compose command" "[compose] {command}"
		add_help "r / run" "run command in container" "run {container} {command}"
		add_help "m / manage" "django's management in django container" "manage {command}"
		add_help "p / pip" "pip in django container" "pip {command}"
		add_help "clean" "create migration directories" "clean [--remove-migrations]"
		add_help "update-geoip-db" "update geoip database from maxmind" "update-geoip-db"
		add_help "create-migration-dirs" "create migration directories" "create-migration-dirs"
		;;


	# For any command that is overriden by script's options
	# Usage: ./viking compose {command}
	c) ;&
	compose)
		compose ${@:2}
		;;


	# Run command inside of container
	# Usage: ./viking run {container} {command}
	r) ;&
	run)
		if [ "$#" -lt "3" ]; then
			echo "Not enough arguments"
			exit 1
		fi

		compose run --rm ${@:2}
		;;


	# Django shortcut command for management
	# Usage: ./viking manage {command}
	m) ;&
	manage)
		compose run --rm django python manage.py ${@:2}
		;;


	# Django debug runserver
	# Usage: ./viking debug
	d) ;&
	debug)
		compose stop django
		compose run --service-ports --rm django python manage.py runserver 0.0.0.0:8000
		;;


	# Django shortcut command for pip
	# Usage: ./viking pip {command}
	p) ;&
	pip)
		compose run --rm django pip ${@:2}
		;;


	# Compile LESS stylesheets
	# apt-get -y install npm && npm install -g less less-plugin-clean-css
	# Usage: ./viking create-migration-dirs
	l) ;&
	less)
		cd ./project
		lessc ./viking/static/less/semantic.less \
			--clean-css="--s1 --advanced --compatibility=ie8" > ./apps/core/static/base.css &&
			echo "You must now run 'collectstatic' from manage.py"
		;;


	# Clean cache files and optionally migrations directories
	# Usage: ./viking clean
	clean)
		cd ./project
		sudo find . -regex "\(.*__pycache__.*\|*.py[co]\)" -delete &&
			echo "Deleted cached and compiled python files and directories"
			
		if [ "$2" == "--remove-migrations" ]; then
			sudo find . -path "*/migrations/*.py" -not -name "__init__.py" -delete &&
				echo "Deleted migration files"
		fi
		;;


	# Update geoip database from maxmind
	# Usage: ./viking update-geoip-db
	update-geoip-db)
		URL="https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz"
		cd ./project && rm GeoLite2-City.mmdb
		wget -q $URL && gunzip -f GeoLite2-City.mmdb.gz && echo "Updated GeoIP Database"
		;;


	# Create migration directories
	# Usage: ./viking create-migration-dirs
	create-migration-dirs)
		cd ./project
		find apps/ -name "models.py" | xargs -L1 dirname \
			| xargs -I % mkdir %/migrations/ && touch %/migrations/__init__.py
		echo "Created migration directories"
		;;


	# Any unrecognized command will be ran in the a container
	# Usage: ./viking {command}
	*)
		compose $@
		;;

esac

exit 0