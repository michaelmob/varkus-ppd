#!/bin/bash
cd $(dirname $0)

# Verify exports script exists
if [ ! -f "exports" ]; then
	echo "exports script does not exist"
fi

source exports

# Run as desired user
if [ "$USER" != "$RUN_AS" ]; then
	sudo -u $RUN_AS ./viking $@
	exit 0
fi

# Verify virtualenv exists
if [ ! -d "../.env" ]; then
	echo "virtualenv does not exist"
	exit 1
fi

# Activate virtualenv
cd ../project/
source ../.env/bin/activate

function manage() {
	python manage.py $@
}

case "$1" in
	# Start Viking's Supervisor services
	start)
		sudo supervisorctl start viking: ;;

	# Stop Viking's Supervisor services
	stop)
		sudo supervisorctl stop viking: ;;

	# Restart all Viking's services
	full-restart)
		sudo supervisorctl restart viking: ;;

	# Restart Viking's workers
	restart)
		sudo supervisorctl restart viking-workers: ;;

	# Bash shell inside virtualenv
	bash)
		bash ;;

	# Django's manage.py
	manage)
		manage ${@:2} ;;

	# Create migration directories in each app folder
	createmigrationdirectories)
		find apps/ -name "models.py" | xargs -L1 dirname | xargs -I % mkdir %/migrations/\;touch %/migrations/__init__.py ;;

	# Run Migrations
	migrate)
		manage makemigrations && manage migrate ;;

	# Run daphne
	daphne)
		daphne viking.asgi:channel_layer ;;

	# Run django workers
	runworker)
		manage runworker ;;

	# Run celery camera
	celerycam)
		manage celerycam --frequency=30.0 ;;

	# Run celery workers
	celeryworker)
		celery worker --app=viking --beat --events --pidfile=celeryw.pid ;;

	# Run debugger with Celerycam
	debug)
		export DEBUG=true

		if [ $DEBUG_CELERY == true ]; then
			manage celerycam --frequency=30.0 &

			manage celery worker --app=viking --beat --events \
				--pidfile=celeryw.pid --loglevel=INFO &
		fi

		manage runserver
		stop ;;

	# Pip within virtualenv
	pip)
		pip ${@:2} ;;

	# Update GeoIP database
	geoip)
		echo "Updating GeoLite2 City Database"
		rm GeoLite2-City.mmdb
		wget -q https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz
		gunzip -f GeoLite2-City.mmdb.gz
		;;

	# Compile LESS
	less)
		echo "Compiling less stylesheet"
		lessc ../static/css/_less/semantic.less \
			--clean-css="--s1 --advanced --compatibility=ie8" > ../static/css/base.css
		;;

	# Clean *.pyc files and migration files if "migrations" parameter
	clean)
		find ../ -name "*.pyc" -type f -delete

		echo "Cleaned python files"

		if [ "$2" = "migrations" ]; then
			cd ../project/
			find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
			echo "Cleaned migration files"
		fi
		;;

	# Backup database to 'backups/' dir in root project folder
	backup)
		export PGPASSWORD=$DB_PASS
		mkdir -p ../backups
		pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME > \
			../backups/BACKUP_$(date +"%Y-%m-%d_%H-%M-%S")
		;;

	# Restore database from earlier backup
	restore)
		psql $PGDATABASE < $2
		;;

	# Edit settings with your favorite editor
	edit)
		case "$2" in
			common) sensible-editor viking/private/settings_common.py ;;
			production) sensible-editor viking/private/settings_production.py ;;
			development) sensible-editor viking/private/settings_development.py ;;
			keys) sensible-editor viking/private/keys.py ;;
			*) exit 1 ;;
		esac
		;;

	*)
		echo -e "Usage: viking arg\nList of args:"
		echo -e "  start: Start Viking (Supervisor)"
		echo -e "  stop: Stop Viking (Supervisor)"
		echo -e "  full-restart: Restart all Viking services (Supervisor)"
		echo -e "  restart: Restart Viking workers (Supervisor)"
		echo -e "  manage {args}: Run manage.py"
		echo -e "  createmigrationdirectories: Create migration directories in each app folder"
		echo -e "  migrate: Run django migrations"
		echo -e "  daphne: Run daphne"
		echo -e "  runworker: Run workers for daphne"
		echo -e "  celerycam: Run celery camera"
		echo -e "  celeryworker: Run workers for celery"
		echo -e "  debug: Run manage.py runserver"
		echo -e "  pip {args}: Run virtualenv pip"
		echo -e "  bash: Run bash inside virtualenv"
		echo -e "  geoip: Update GeoIP database"
		echo -e "  clean [migration]: Clean pycache [and migration files]"
		echo -e "  backup {file}: Backup database using PostgreSQL"
		echo -e "  restore {file}: Restore database using PostgreSQL"
		echo -e "  edit {common/production/development/keys}: Edit settings"
		exit 1
		;;
esac

exit 0