#!/bin/bash
# Set current directory to script's directory
cd "${0%/*}/"

# Verify env_vars file exists
if [ ! -f "./env_vars" ]; then
	echo "\"env_vars\" file not found"
	exit 1
fi

# Source env_vars variables
source ./env_vars

# Source custom_env_vars if file exists
if [ -f "./extra_env_vars" ]; then
	source ./extra_env_vars
fi

#
# helper function to display options
#
function add_help() {
	echo "  $1 ($2)"
	echo "    usage: viking $3"
	echo ""
}

# Set current directory to project directory
cd ../project

case "$1" in

	# Django shortcut command for management
	# Usage: ./viking manage {command}
	m) ;&
	manage)
		python3.6 manage.py ${@:2}
		;;


	# Django debug runserver
	# Usage: ./viking debug
	d) ;&
	debug)
		python3.6 manage.py runserver 0.0.0.0:9000
		;;


	# Run daphne server in a production environment.
	# Usage: ./viking run
	daphne)
		daphne -b 0.0.0.0 -p 9000 viking.asgi:channel_layer &
		;;


	# Run worker in a production environment.
	# Set environment variable DJANGO_WORKERS for worker count.
	# Usage: ./viking worker
	worker)
		for i in $(seq 1 ${DJANGO_WORKERS:-1}); do
			python3.6 manage.py runworker &
		done
		;;


	# Run celery worker.
	# Set environment variable CELERY_WORKERS for worker count.
	# Usage: ./viking celery [-l info]
	celery)
		for i in $(seq 1 ${CELERY_WORKERS:-1}); do
			celery -A viking worker ${@:2} &
		done
		;;


	# Run celery beat scheduler.
	# Usage: ./viking beat [-l info]
	beat)
		celery -A viking beat ${@:2} &
		;;


	# Compile LESS stylesheets
	# apt-get -y install npm && npm install -g less less-plugin-clean-css
	# Usage: ./viking create-migration-dirs
	l) ;&
	less)
		cd ./project
		lessc ./viking/static/less/semantic.less \
			--clean-css="--s1 --advanced --compatibility=ie8" > ./apps/core/static/base.css &&
			echo "You must now run 'collectstatic' from manage.py"
		;;


	# Clean cache files and optionally migrations directories
	# Usage: ./viking clean
	clean)
		sudo find . -regex "\(.*__pycache__.*\|*.py[co]\)" -delete &&
			echo "Deleted cached and compiled python files and directories"
			
		if [ "$2" == "--remove-migrations" ]; then
			sudo find . -path "*/migrations/*.py" -not -name "__init__.py" -delete &&
				echo "Deleted migration files"
		fi
		;;


	# Create migration directories
	# Usage: ./viking create-migration-dirs
	create-migration-dirs)
		find apps/ -name "models.py" | xargs -L1 dirname \
			| xargs -I % mkdir %/migrations/ && touch %/migrations/__init__.py
		echo "Created migration directories"
		;;


	# List commands and helpful text
	*)
		echo -e "\nViking Application\n"
		add_help "m / manage" "django's management command" "manage {command}"
		add_help "d / debug" "django runserver for debugging" "debug {command}"
		add_help "clean" "create migration directories" "clean [--remove-migrations]"
		add_help "create-migration-dirs" "create migration directories" "create-migration-dirs"
		exit 1
		;;
esac

exit 0