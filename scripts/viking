#!/bin/bash
cd "$(dirname $0)/.."


#
# shortcut function for docker-compose as superuser 
#
function compose() {
	sudo docker-compose $@
}


#
# shortcut function for docker-compose on a production server
#
function compose_production() {
	compose -f docker-compose.yml -f docker-compose.production.yml $@
}


#
# shortcut function for managing Django project within container 
#
function manage() {
	compose run --rm django python manage.py $@
}


#
# shortcut function for managing Django project within container 
#
function manage_production() {
	compose_production run --rm django python manage.py $@
}


#
# shortcut function for running pip within container 
#
function pip() {
	sudo docker-compose run --rm django pip $@
}


case "$1" in

	#
	# equivalent to 'docker-compose'
	#
	compose)
		compose ${@:2} ;;

	#
	# equivalent to 'manage.py ...'
	#
	manage)
		manage ${@:2} ;;

	#
	# equivalent to 'manage.py ...' for production
	#
	manage-production)
		manage_production ${@:2} ;;

	#
	# equivalent to 'pip ...'
	#
	pip)
		pip ${@:2} ;;

	#
	# upgrade all required pip packages
	#
	pip-upgrade)
		pip install -r "/viking/requirements.txt" --upgrade ;;


	#
	# create migration directories
	#
	c-m-d)
		find apps/ -name "models.py" | xargs -L1 dirname | xargs -I % mkdir %/migrations/\;touch %/migrations/__init__.py ;;

	#
	# run migrations
	#
	migrate)
		manage makemigrations
		manage migrate ;;

	#
	# run migrations for production
	#
	migrate-production)
		manage_production makemigrations
		manage_production migrate ;;
		

	#
	# start containers (useful for debug)
	#
	start)
		compose -f docker-compose.yml up -d ;;


	#
	# start containers in production mode
	#
	start-production)
		compose_production up -d 
		compose_production scale worker=4 ;;


	#
	# stop containers (optional: --remove-orphans)
	#
	stop)
		compose down ${@:2} ;;

	#
	# stop containers in production mode
	#
	stop-production)
		compose -f docker-compose.yml -f docker-compose.production.yml down ;;


	#
	# restart containers
	#
	restart)
		compose down --remove-orphans && compose -f docker-compose.yml -f docker-compose.production.yml up -d ;;


	#
	# compile less stylesheet
	# apt-get install npm && npm install -g less less-plugin-clean-css
	#
	less)
		lessc ../project/static/_less/semantic.less \
			--clean-css="--s1 --advanced --compatibility=ie8" > ../project/static/css/base.css
		;;


	#
	# equivalent to 'compose logs -f django'
	#
	logs)
		compose logs -f django
		;;


	#
	# remove .pyc/.pyo files (optional: --remove-migrations)
	#
	clean)
		sudo py3clean .
		if [ "$2" = "--remove-migrations" ]; then
			sudo find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
		fi ;;


	#
	# chown all files to '$LOGNAME'
	#
	chown)
		sudo chown -R $LOGNAME: . ;;


	#
	# update geoip database
	#
	geoip)
		cd ./project
		rm GeoLite2-City.mmdb
		wget -q https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz
		gunzip -f GeoLite2-City.mmdb.gz
		;;
		

	#
	# list commands
	#
	*)
		echo -e "\e[1mViking\e[0m"
		echo -e "  compose\t equivalent to 'docker-compose'"
		echo -e "  pip\t\t equivalent to 'pip ...'"
		echo -e "  pip-upgrade\t upgrade pip requirements"
		echo -e "  manage\t equivalent to 'python manage.py ...'"
		echo -e "  c-m-d\t\t create migration directories"
		echo -e "  migrate\t run migrations"
		echo -e "  start\t\t start containers"
		echo -e "  stop\t\t stop containers (optional: --remove-orphans)"
		echo -e "  logs\t\t show docker-compose logs for django"
		echo -e "  clean\t\t remove .pyc/.pyo files (optional: --remove-migrations)"
		echo -e "  chown\t\t chown all files to '$LOGNAME'"
		echo -e "  geoip\t\t update geoip database"
		;;

esac